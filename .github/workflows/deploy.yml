# .github/workflows/deploy.yaml nodejs app
name: Build and Push to DockerHub
on:
  push:
    branches:
      - main
jobs:
  build:
    name: VAULT DEMO PIPELINE
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - uses: act10ns/slack@v1
        with:
         status: starting
         channel: 'github-actions'
         if: always()
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm Install
        id: npm_install
        run: npm install
      - run: yarn add --dev jest-junit
      - name: npm Build
        id: npm_build
        run: npm run build --if-present
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results
          path: jest-junit.xml
      - name: Download Artifacts
        if: always()
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish Unit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: jest-junit.xml   
          
#       - name: Import Secrets
#         id: Import_vault_secret
#         uses: hashicorp/vault-action@v2.0.1 
#         with:
#           url: http://34.69.137.61:8200
#           tlsSkipVerify: true
#           token: ${{ secrets.VAULT_TOKEN }}
#           secrets: |
#             kv/data/ci/dockerUsername DOCKERHUB_USERNAME;
#             kv/data/ci/dockerPassword DOCKERHUB_PASSWORD
#       - name: Build Docker Image
#         id: Build_Docker
#         run: docker build . --no-cache --file Dockerfile -t shelnaop/vault_poc_repo:vault-node_app
#       - name: Login Dockerhub
#         id: Login_Dockerhub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKERHUB_USERNAME }}
#           password: ${{ env.DOCKERHUB_PASSWORD }}
#       - name: Push Image to Dockerhub
#         id: Push_Image
#         run: docker push shelnaop/vault_poc_repo:vault-node_app
#       - uses: act10ns/slack@v1
#         with:
#           status: ${{ job.status }}
#           steps: ${{ toJson(steps) }}
#           channel: '#project'
#         if: always()
          
          
#   check_user_permission:
#       runs-on: ubuntu-latest
#       name: A job to check user's permission level
#       steps:
#       # Check for write permission
#         - name: Check user permission
#           id: check
#           uses: scherermichael-oss/action-has-permission@master
#           with:
#             required-permission: write
#           env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       # Use the output from the `check` step
#         - name: Run only if user has sufficient permissions
#           if: steps.check.outputs.has-permission
#           run: echo "Congratulations! Your permissions to access the repository are sufficient."
#         - name: Run only if user has NOT sufficient permissions
#           if: "! steps.check.outputs.has-permission"
#           run: echo "Sorry! Your permissions are insufficient."  
   
#   Polaris-scan:
#     name: "Polaris Scan"
#     #needs: build
#     runs-on: ubuntu-latest
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()
#     steps:        
#       - uses: actions/checkout@v2       
#       - name: Static Analysis with Polaris
#         shell : bash 
#         env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
#           export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
#           wget -q https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip
#           unzip -j polaris_cli-linux64.zip -d /tmp
#           mkdir /tmp/output
#           /tmp/polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure | tee /tmp/output/polaris-output.txt
#           #Upload the polaris scan results to gcp cloud storage bucket

#       - id: upload-file
#         uses: google-github-actions/upload-cloud-storage@main
#         with:
#           credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
#           path: /tmp/output
#           destination: testexamaple-1/polaris-output.txt
        
   
#   Blackduck-SCA:
#     name: "Blackduck SCA"
#     # needs: build
#     runs-on: ubuntu-16.04
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()
#     steps:        
#       - uses: actions/checkout@v2
#       - run: npm install
#       - name: Software Composition Analysis with Black Duck
#         uses: blackducksoftware/github-action@v2
#         with:
#           args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG" --detect.risk.report.pdf=true'
